USE NEW;

-- Check Datatype of table
SELECT 
    COLUMN_NAME, 
    DATA_TYPE 
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'zomato';																			

-- CHECK TABLES IN ALL THE DATABSE
SELECT DISTINCT(TABLE_CATALOG),TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS;
SELECT * FROM INFORMATION_SCHEMA.COLUMNS;

-- Overview of the Data
SELECT * FROM Zomato;


-- CHECKING FOR DUPLICATE
SELECT RestaurantID,COUNT(RestaurantID) FROM Zomato
GROUP BY RestaurantID
ORDER BY 2 DESC;

SELECT * FROM ZOMATO_COUNTRY;

-- REMOVING UNWANTED ROWS
DELETE FROM Zomato 
WHERE CountryCode NOT IN (Select CountryCode from zomato_country);

-- COUNTRY CODE COLUMN
SELECT A.CountryCode,B.COUNTRY
FROM Zomato A JOIN ZOMATO_COUNTRY B
ON A.CountryCode = B.COUNTRYCODE;

-- ADDING NEW COLUMN FOR COUNTRY NAME
ALTER TABLE Zomato ADD COUNTRY_NAME VARCHAR(50);

-- MERGING AND ADDING COUNTRY DETAILS FROM DIFFERENT TABLE THROUGH UPDATE WITH JOIN STATEMENT
UPDATE zomato A 
JOIN zomato_country B ON A.countrycode = B.countrycode
SET A.COUNTRY_NAME = B.COUNTRY;


-- CITY COLUMN
-- IDENTIFYING IF THERE ARE ANY MISS-SPELLED WORD
SELECT DISTINCT City FROM Zomato 
WHERE CITY LIKE '%?%';															  

-- UPDATING WITH REPLACE STRING FUNCTION
UPDATE Zomato SET City  = (case when city like '%?%' then REPLACE(CITY,'?','i')
				else REPLACE(city,'?','I') 
                                end);

-- COUNTING TOTAL REST. IN EACH CITY OF PARTICULAR COUNTRY
SELECT COUNTRY_NAME, CITY, COUNT(City) AS TOTAL_REST							      
FROM Zomato
GROUP BY COUNTRY_NAME,CITY 
ORDER BY 1,2,3 DESC;

-- LOCALITY COLUMN
SELECT CITY,Locality, COUNT(Locality) AS COUNT_LOCALITY,
-- ROLLING COUNT														
SUM(COUNT(Locality)) OVER(PARTITION BY City ORDER BY CITY,Locality) AS ROLL_COUNT
FROM Zomato
WHERE COUNTRY_NAME = 'INDIA'
GROUP BY Locality,CITY
ORDER BY 1,2,3 DESC;


-- DROPING COLUMN LocalityVerbose, Address
ALTER TABLE Zomato DROP COLUMN Address,
				   DROP COLUMN LocalityVerbose; 



-- CUISINES COLUMN 
SELECT Cuisines, COUNT(Cuisines) FROM Zomato
WHERE Cuisines IS NULL OR Cuisines = ' '
GROUP BY Cuisines
ORDER BY 2 DESC;

SELECT Cuisines,COUNT(Cuisines)
FROM Zomato
GROUP BY Cuisines
ORDER BY 2 DESC;


-- CURRENCY COULMN
SELECT Currency, COUNT(Currency) FROM Zomato
GROUP BY Currency
ORDER BY 2 DESC;


-- YES/NO COLUMNS
SELECT DISTINCT(Has_Table_booking) FROM Zomato;
SELECT DISTINCT(Has_Online_delivery) FROM Zomato;
SELECT DISTINCT(Is_delivering_now) FROM Zomato;
SELECT DISTINCT(Switch_to_order_menu) FROM Zomato;


-- DROP COULLMN [Switch_to_order_menu]
ALTER TABLE Zomato DROP COLUMN Switch_to_order_menu;

-- PRICE RANGE COLUMN
SELECT DISTINCT(Price_range) FROM Zomato;

-- VOTES COLUMN (CHECKING MIN,MAX,AVG OF VOTE COLUMN)
ALTER TABLE Zomato MODIFY COLUMN Votes INT;

SELECT 
    MIN(Votes) AS MIN_VT,
    (CAST(AVG(Votes) AS UNSIGNED)) AS AVG_VT,
    MAX(Votes) AS MAX_VT
FROM Zomato;

-- COST COLUMN
ALTER TABLE Zomato MODIFY COLUMN Average_Cost_for_two FLOAT;

SELECT Currency,MIN(CAST(Average_Cost_for_two AS unsigned)) AS MIN_CST,
AVG(CAST(Average_Cost_for_two AS unsigned)) AS AVG_CST,
MAX(CAST(Average_Cost_for_two AS unsigned)) AS MAX_CST
FROM Zomato 
-- WHERE Currency LIKE '%U%'
GROUP BY Currency;


-- RATING COLUMN
SELECT MIN(Rating) AS MIN_RA,
ROUND(AVG(CAST(Rating AS DECIMAL)),1) AS AVG_RA, 
MAX(Rating) AS MAX_RA 
FROM Zomato;

SELECT CAST(Rating AS decimal) AS NUM FROM Zomato WHERE CAST(Rating AS decimal) >= 4;

ALTER TABLE Zomato MODIFY COLUMN Rating DECIMAL;

SELECT RATING FROM Zomato WHERE Rating >= 4;

SELECT RATING,(CASE
WHEN Rating >= 1 AND Rating < 2.5 THEN 'POOR'
WHEN Rating >= 2.5 AND Rating < 3.5 THEN 'GOOD'
WHEN Rating >= 3.5 AND Rating < 4.5 THEN 'GREAT'
WHEN Rating >= 4.5 THEN 'EXCELLENT'
END) AS RATE_CATEGORY
FROM Zomato;

ALTER TABLE Zomato ADD RATE_CATEGORY VARCHAR(20);

-- UPDATING NEW ADDED COLUMN WITH REFFERENCE OF AN EXISTING COLUMN
-- UPDATE WITH CASE-WHEN STATEMENT
UPDATE Zomato SET RATE_CATEGORY = (CASE								     	
WHEN Rating >= 1 AND Rating < 2.5 THEN 'POOR'
WHEN Rating >= 2.5 AND Rating < 3.5 THEN 'GOOD'
WHEN Rating >= 3.5 AND Rating < 4.5 THEN 'GREAT'
WHEN Rating >= 4.5 THEN 'EXCELLENT'
END)
